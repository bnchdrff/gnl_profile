<?php

/**
 * @file gnl_api.module
 */

define("GNL_API_DEFAULT_LIMIT", 10);
define("GNL_API_MAX_LIMIT", 100);

/**
 * Implements hook_services_resources().
 */
function gnl_api_services_resources() {
  $api = array(
    'orgs' => array(
      'operations' => array(
        'retrieve' => array(
          'help' => 'Retrieves Organization',
          'callback' => '_gnl_api_retrieve_org',
          'access callback' => 'user_access',
          'access arguments' => array('access content'),
          'access arguments append' => FALSE,
          'args' => array(
            array(
              'name' => 'id',
              'type' => 'int',
              'description' => 'Organization ID',
              'source' => array('path' => '0'),
              'optional' => FALSE,
              'default value' => NULL,
            ),
          ),
        ),
        'index' => array(
          'help' => 'Lists Organizations',
          'callback' => '_gnl_api_index_orgs',
          'access arguments' => array('access content'),
          'args' => array(
            array(
              'name' => 'limit',
              'type' => 'int',
              'description' => 'Limit response count (default ' . GNL_API_DEFAULT_LIMIT . ')',
              'source' => array('param' => 'limit'),
              'optional' => TRUE,
              'default value' => GNL_API_DEFAULT_LIMIT,
            ),
            array(
              'name' => 'offset',
              'type' => 'int',
              'description' => 'Offset starting record',
              'source' => array('param' => 'offset'),
              'optional' => TRUE,
              'default value' => 0,
            ),
            array(
              'name' => 'filters',
              'type' => 'array',
              'description' => 'Filter properties',
              'source' => array('param' => 'filters'),
              'optional' => TRUE,
              'default value' => array(),
            ),
          ),
        ),
      ),
    ),
    'grants' => array(
      'operations' => array(
        'retrieve' => array(
          'help' => 'Retrieves Grant',
          'callback' => '_gnl_api_retrieve_grant',
          'access callback' => 'user_access',
          'access arguments' => array('access content'),
          'access arguments append' => FALSE,
          'args' => array(
            array(
              'name' => 'id',
              'type' => 'int',
              'description' => 'Grant ID',
              'source' => array('path' => '0'),
              'optional' => FALSE,
              'default value' => NULL,
            ),
          ),
        ),
        'index' => array(
          'help' => 'Lists Grants',
          'callback' => '_gnl_api_index_grants',
          'access arguments' => array('access content'),
          'args' => array(
            array(
              'name' => 'limit',
              'type' => 'int',
              'description' => 'Limit response count (default ' . GNL_API_DEFAULT_LIMIT . ')',
              'source' => array('param' => 'limit'),
              'optional' => TRUE,
              'default value' => GNL_API_DEFAULT_LIMIT,
            ),
            array(
              'name' => 'offset',
              'type' => 'int',
              'description' => 'Offset starting record',
              'source' => array('param' => 'offset'),
              'optional' => TRUE,
              'default value' => 0,
            ),
          ),
        ),
      ),
    ),
  );

  return $api;
}

function _gnl_api_retrieve_org($id) {
  return _gnl_api_retrieve('org', $id);
}

function _gnl_api_retrieve_grant($id) {
  return _gnl_api_retrieve('grant', $id);
}

function _gnl_api_index_orgs($limit, $offset, $filters) {
  return _gnl_api_index_nodes('org', $limit, $offset, $filters);
}

function _gnl_api_index_grants($limit, $offset, $filters) {
  return _gnl_api_index_nodes('grant', $limit, $offset, $filters);
}

/**
 * Helps retrieve a node.
 *
 * @param string $type
 *
 * @param int $id
 *
 * @return object
 */
function _gnl_api_retrieve($type, $id) {
  $node = node_load($id);
  if (!$node || $type !== $node->type) { // check the facts!
    return services_error(t('@type @id does not exist.', array('@type' => $type, '@id' => $id)), 404);
  } else {
    return _gnl_api_clean_node($node);
  }
}

/**
 * Helps get a set of nodes.
 *
 * @param string $bundle
 *   Drupal entity bundle
 *
 * @param int $limit
 *
 * @param int $offset
 *
 * @param array $filters
 *   array of property names (like title) to use as LIKE filters
 *
 * @return array
 */
function _gnl_api_index_nodes($bundle, $limit, $offset, $filters) {
  $limit = intval($limit);
  $offset = intval($offset);
  $limit = (is_int($limit) && $limit < GNL_API_MAX_LIMIT) ? $limit : GNL_API_DEFAULT_LIMIT;
  $offset = (is_int($offset)) ? $offset : 0;

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $bundle)
    ->propertyCondition('status', 1)
    ->propertyOrderBy('created', 'ASC')
    ->range($offset, $limit)
    ->addMetaData('account', user_load(0));

  foreach ($filters as $property => $str) {
    $query->propertyCondition($property, '%' . db_like($str) . '%', 'LIKE');
  }

  $res = $query->execute();

  if (!array_key_exists('node', $res)) {
    return services_error(t('no results found'), 404);
  } else {
    $nids = array_keys($res['node']);
    $nodes = array_map('_gnl_api_clean_node', node_load_multiple($nids));
    return $nodes;
  }
}

/**
 * Unsets Drupally things from nodes.
 *
 * @param object $node
 *
 * @return $node
 */
function _gnl_api_clean_node($node) {
  // first, unset things
  $unwanted_properties = array(
    'data',
    'language',
    'picture',
    'promote',
    'sticky',
  );

  foreach ($unwanted_properties as $prop) {
    unset($node->{$prop});
  }

  // then, remove language from things that just don't need it
  foreach ($node as $key => $val) {
    if (is_array($val)) {
      // change empty arrays to NULL
      if (count($val) === 0) {
        $node->{$key} = NULL;
      }
      // remove translations
      // @todo change this in future l10n work
      if (strpos($key, 'field_') === 0 && array_key_exists('und', $val) && array_key_exists(0, $val['und'])) {
        $node->{$key} = $val['und'][0];
      }
    }
  }

  return $node;
}

