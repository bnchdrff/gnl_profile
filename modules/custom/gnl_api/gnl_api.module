<?php

/**
 * @file gnl_api.module
 */

define("GNL_API_DEFAULT_LIMIT", 10);
define("GNL_API_MAX_LIMIT", 100);

/**
 * Implements hook_services_resources().
 */
function gnl_api_services_resources() {
  $api = array(
    'org' => array(
      'operations' => array(
        'retrieve' => array(
          'help' => 'Retrieves a single Organization',
          'callback' => '_gnl_api_get_org',
          'access callback' => 'user_access',
          'access arguments' => array('access content'),
          'access arguments append' => FALSE,
          'args' => array(
            array(
              'name' => 'org_id',
              'type' => 'string',
              'description' => 'Organization ID',
              'source' => array('path' => '1'),
              'optional' => TRUE,
              'default' => '0',
            ),
          ),
        ),
      ),
    ),
    'orgs' => array(
      'operations' => array(
        'retrieve' => array(
          'help' => 'Retrieves Organizations',
          'callback' => '_gnl_api_get_orgs',
          'access callback' => 'user_access',
          'access arguments' => array('access content'),
          'access arguments append' => FALSE,
          'args' => array(
            array(
              'name' => 'limit',
              'type' => 'int',
              'description' => 'Limit response count, default 10',
              'source' => array('param' => 'limit'),
              'optional' => TRUE,
              'default' => GNL_API_DEFAULT_LIMIT,
            ),
            array(
              'name' => 'offset',
              'type' => 'int',
              'description' => 'Offset starting record',
              'source' => array('param' => 'offset'),
              'optional' => TRUE,
              'default' => 0,
            ),
          ),
        ),
      ),
    ),
    'grant' => array(
      'operations' => array(
        'retrieve' => array(
          'help' => 'Retrieves a single Grant',
          'callback' => '_gnl_api_get_grant',
          'access callback' => 'user_access',
          'access arguments' => array('access content'),
          'access arguments append' => FALSE,
          'args' => array(
            array(
              'name' => 'grant_id',
              'type' => 'string',
              'description' => 'Grant ID',
              'source' => array('path' => '1'),
              'optional' => TRUE,
              'default' => '0',
            ),
          ),
        ),
      ),
    ),
    'grants' => array(
      'operations' => array(
        'retrieve' => array(
          'help' => 'Retrieves Grants',
          'callback' => '_gnl_api_get_grants',
          'access callback' => 'user_access',
          'access arguments' => array('access content'),
          'access arguments append' => FALSE,
          'args' => array(
            array(
              'name' => 'limit',
              'type' => 'int',
              'description' => 'Limit response count, default 10',
              'source' => array('param' => 'limit'),
              'optional' => TRUE,
              'default' => GNL_API_DEFAULT_LIMIT,
            ),
            array(
              'name' => 'offset',
              'type' => 'int',
              'description' => 'Offset starting record',
              'source' => array('param' => 'offset'),
              'optional' => TRUE,
              'default' => 0,
            ),
          ),
        ),
      ),
    ),
  );

  return $api;
}

function _gnl_api_get_org($org_id) {
  return _gnl_api_clean_node(node_load($org_id));
}

function _gnl_api_get_orgs($limit, $offset) {
  return _gnl_api_get_nodes('org', $limit, $offset);
}

function _gnl_api_get_grant($grant_id) {
  return _gnl_api_clean_node(node_load($grant_id));
}

function _gnl_api_get_grants($limit, $offset) {
  return _gnl_api_get_nodes('grant', $limit, $offset);
}

/**
 * Helps get a set of nodes.
 *
 * @param string $bundle
 *   Drupal entity bundle
 *
 * @param int $limit
 *
 * @param int $offset
 *
 * @return array
 */
function _gnl_api_get_nodes($bundle, $limit, $offset) {
  $limit = (is_int($limit) && $limit < GNL_API_MAX_LIMIT) ? $limit : GNL_API_DEFAULT_LIMIT;
  $offset = (is_int($offset)) ? $offset : 0;

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $bundle)
    ->propertyCondition('status', 1)
    ->propertyOrderBy('created', 'ASC')
    ->range($offset, $limit)
    ->addMetaData('account', user_load(0));

  $res = $query->execute();
  $org_nids = array_keys($res['node']);

  $orgs = array_map('_gnl_api_clean_node', node_load_multiple($org_nids));

  return $orgs;
}

/**
 * Unsets Drupally things from nodes.
 *
 * @param object $node
 *
 * @return $node
 */
function _gnl_api_clean_node($node) {
  // first, unset things
  $unwanted_properties = array(
    'data',
    'language',
    'picture',
    'promote',
    'sticky',
  );

  foreach ($unwanted_properties as $prop) {
    unset($node->{$prop});
  }

  // then, remove language from things that just don't need it
  foreach ($node as $key => $val) {
    if (is_array($val)) {
      // change empty arrays to NULL
      if (count($val) === 0) {
        $node->{$key} = NULL;
      }
      // remove translations
      // @todo change this in future l10n work
      if (strpos($key, 'field_') === 0 && array_key_exists('und', $val) && array_key_exists(0, $val['und'])) {
        $node->{$key} = $val['und'][0];
      }
    }
  }

  return $node;
}

